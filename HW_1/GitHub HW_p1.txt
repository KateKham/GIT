GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.


Как отправить ДЗ на проверку.
 1. Создайте текстовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON

 4. Создать внешний репозиторий c названием JSON.
(в своем аккаунте на GitHub перейти во вкладку профиль ---> repositories ---> new ---> ввести имя JSON ---> сreate repositary)

 5. Клонировать репозиторий JSON на локальный компьютер.

    git clone https://github.com/KateKham/JSON.git

 6. Внутри локального JSON создать файл “new.json”.
    touch new.json

 7. Добавить файл под гит.
    git add new.json

 8. Закоммитить файл.
    git commit -m "create a new.json file"

 9. Отправить файл на внешний GitHub репозиторий.
    git push origin

 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
    vim new.json

 11. Отправить изменения на внешний репозиторий.
    git add new.json
    git commit -m "added information about myself"
    git push 

 12. Создать файл preferences.json
    touch preferences.json

 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, страна которую хотели бы посетить) в формате JSON.
    vim preferences.json

 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
    vim skills.json

 15. Отправить сразу 2 файла на внешний репозиторий. 
    git add .
	git commit -m "added 2 new files" 
	git push

 16. На веб интерфейсе создать файл bug_report.json.
(в репозитории JSON нажать add file ---> create new file ---> ввести имя bug_report.json)

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
(нажать commit changes)

 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
(в репозитории JSON выбрать файл bug_report.json ---> edit this file и добавить баг репорт)

 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
(нажать commit changes)

 20. Синхронизировать внешний и локальный репозиторий JSON 
    git pull

XML

 21. Создать внешний репозиторий c названием XML.
(в своем аккаунте на GitHub перейти во вкладку профиль ---> repositories ---> new ---> ввести имя XML ---> сreate repositary)

 22. Клонировать репозиторий XML на локальный компьютер.
    git clone https://github.com/KateKham/XML.git

 23. Внутри локального XML создать файл “new.xml”.
    touch new.xml

 24. Добавить файл под гит.
    git add new.xml
  
 25. Закоммитить файл.
    git commit -m "create new.xml file"                     

 26. Отправить файл на внешний GitHub репозиторий.
    git push 

 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
    vim new.xml

 28. Отправить изменения на внешний репозиторий.
    git add new.xml 
	git commit -m "add information about myself" 
	git push
  

 29. Создать файл preferences.xml
    touch preferences.xml

 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, страна которую хотели бы посетить) в формате XML.
    vim preferences.xml

 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
    vim skills.xml

 32. Сделать коммит в одну строку.
    git add .
    git commit -m "add preference.xml and skills.xml

 33. Отправить сразу 2 файла на внешний репозиторий.
    git push                        

 34. На веб интерфейсе создать файл bug_report.xml.
(в репозитории XML нажать add file ---> create new file ---> ввести имя bug_report.xml)

 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
(нажать commit changes)

 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
(в репозитории XML выбрать файл bug_report.xml ---> edit this file и добавить баг репорт)

 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
(нажать commit changes)

 38. Синхронизировать внешний и локальный репозиторий XML
    git pull


TXT

 1. Создать внешний репозиторий c названием TXT. 
(в своем аккаунте на GitHub перейти во вкладку профиль ---> repositories ---> new ---> ввести имя TXT ---> сreate repositary)

 2. Клонировать репозиторий TXT на локальный компьютер.
    git clone https://github.com/KateKham/TXT.git

 3. Внутри локального TXT создать файл “new.txt”.
    touch new.txt

 4. Добавить файл под гит.
    git add new.txt

 5. Закоммитить файл.
    git commit -m "add new.txt file"

 6. Отправить файл на внешний GitHub репозиторий.
    git push

 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
    vim new.txt

 8. Отправить изменения на внешний репозиторий.
    git add new.txt
    git commit -m "added information about myself"
    git push

 9. Создать файл preferences.txt
    touch preferences.txt

 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, страна которую хотели бы посетить) в формате TXT.
    vim preferences.txt

 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
    vim skills.txt

 12. Сделать коммит в одну строку.
    git commit -am "add preferences.txt and skills.txt"

 13. Отправить сразу 2 файла на внешний репозиторий.
    git push

 14. На веб интерфейсе создать файл bug_report.txt. 
(в репозитории TXT нажать add file ---> create new file ---> ввести имя bug_report.txt)

 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
(нажать commit changes)

 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
(в репозитории TXT выбрать файл bug_report.txt ---> edit this file и добавить баг репорт)

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
(нажать commit changes)

 18. Синхронизировать внешний и локальный репозиторий TXT
    git pull





